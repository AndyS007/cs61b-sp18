package byog.lab5;import org.junit.Test;import static java.lang.Thread.sleep;import static org.junit.Assert.*;import java.util.Random;import byog.TileEngine.TERenderer;import byog.TileEngine.TETile;import byog.TileEngine.Tileset;import java.util.Random;/** * Draws a world consisting of hexagonal regions. */public class HexWorld {    private static final int WIDTH = 80;    private static final int HEIGHT = 50;    private static final long SEED = 2873123;    private static final Random RANDOM = new Random(SEED);    public static void main(String[] args) throws InterruptedException {        TERenderer ter = new TERenderer();        ter.initialize(WIDTH, HEIGHT);        TETile[][] world = makeWorldOfNothing();        Position startPoint = new Position(10, 30);        int length = 5;        int numbers = 3;        for (int i = 0; i < 5; i++) {            drawRandomVerticalHexes(world, startPoint, length, numbers);            startPoint = i < 2 ? RightNeighbor(startPoint, length, Part.TOP) : RightNeighbor(startPoint, length, Part.BOTTOM);            numbers = i < 2 ? numbers + 1 : numbers - 1;        }        ter.renderFrame(world);        sleep(200);        world = makeWorldOfNothing();        ter.renderFrame(world);    }    public static void drawRandomVerticalHexes(TETile[][] world, Position p, int length, int numbers) {        Position tempPosition = new Position(p.x, p.y);        for (int i = 0; i < numbers; i ++) {            addHexagon(world, tempPosition, length, randomTile());            tempPosition.y -= 2 * length;        }    }    private enum Part {        TOP, BOTTOM;    }    public static Position RightNeighbor(Position initialPositon, int length, Part flag) {        Position returnVal = new Position();        returnVal.x = initialPositon.x + 2 * length - 1;        returnVal.y = flag == Part.TOP? initialPositon.y + length : initialPositon.y - length;        return returnVal;    }    private static TETile randomTile() {        int tileNum = RANDOM.nextInt(9);        switch (tileNum) {            case 0:                return Tileset.WALL;            case 1:                return Tileset.FLOWER;            case 2:                return Tileset.WATER;            case 3:                return Tileset.SAND;            case 4:                return Tileset.GRASS;            case 5:                return Tileset.MOUNTAIN;            case 7:                return Tileset.TREE;            case 8:                return Tileset.LOCKED_DOOR;            case 6:                return Tileset.UNLOCKED_DOOR;            default:                return Tileset.NOTHING;        }    }    public static void addHexagon(TETile[][] world, Position p, int length, TETile t) {        buildOneHalf(world, p, length, t, Part.BOTTOM);        Position nextPosition = new Position(p.x, p.y + length);        buildOneHalf(world, nextPosition, length, t, Part.TOP);    }    private static void buildOneHalf(TETile[][] world, Position p, int length, TETile t, Part flag) {        //flag == 1 means lower half        int doNothing = flag == Part.BOTTOM ? length - 1 : 0;        int times = flag == Part.BOTTOM ? length : 3 * length - 2;        for (int currentPositionY = p.y; currentPositionY < p.y + length; currentPositionY++) {            int currentPositionX = p.x;            for (int i = 0; i < doNothing; i++) {                currentPositionX += 1;            }            for (int i = 0; i < times; i++) {                world[currentPositionX][currentPositionY] = t;                currentPositionX += 1;            }            times = flag == Part.BOTTOM? times + 2 : times - 2;            doNothing = flag == Part.BOTTOM? doNothing - 1 : doNothing + 1;        }    }    private static TETile[][] makeWorldOfNothing() {        TETile[][] world = new TETile[WIDTH][HEIGHT];        for (int x = 0; x < WIDTH; x += 1) {            for (int y = 0; y < HEIGHT; y += 1) {                world[x][y] = Tileset.NOTHING;            }        }        return world;    }}